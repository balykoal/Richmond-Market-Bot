"""\
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

from pathlib import Path

from database import PaymentOperations, AdminOperations, UserOperations, ReceiptOperations
from keyboards.inline import AdminKeyboards, NavigationKeyboards, MainKeyboards
from utils.states import AdminStates
from utils.helpers import MessageFormatter, format_user_info, format_price, format_datetime
from utils.backup import BackupManager
from services.notification import NotificationService
from config import settings

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext) -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if message.from_user.id != settings.ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await AdminOperations.get_stats()
        pending_payments = await PaymentOperations.get_pending_payments()

        text = f"""\
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users', {}).get('total', 0)}
‚Ä¢ –ü–æ—Å—Ç–æ–≤: {stats.get('posts', {}).get('total', 0)}
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {len(pending_payments)}
‚Ä¢ –î–æ—Ö–æ–¥: {stats.get('payments', {}).get('revenue', 0)} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üëá\
"""

        await message.answer(
            text=text,
            reply_markup=AdminKeyboards.get_admin_menu(),
            parse_mode="HTML"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await AdminOperations.log_admin_action(
            admin_id=message.from_user.id,
            action="admin_panel_access",
            details={"ip": "unknown", "timestamp": message.date.isoformat()}
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


@router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await AdminOperations.get_stats()
        pending_payments = await PaymentOperations.get_pending_payments()

        text = f"""\
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users', {}).get('total', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('users', {}).get('new_today', 0)}
‚Ä¢ –ü–æ—Å—Ç–æ–≤: {stats.get('posts', {}).get('total', 0)}
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {len(pending_payments)}
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats.get('payments', {}).get('revenue', 0)} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üëá\
"""

        await callback.message.edit_text(
            text=text,
            reply_markup=AdminKeyboards.get_admin_menu(),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_menu_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "switch_to_user_mode")
async def switch_to_user_mode_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.clear()
        await callback.message.edit_text(
            "üë§ <b>–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
            reply_markup=MainKeyboards.get_main_menu(callback.from_user.id, settings.ADMIN_ID),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ switch_to_user_mode_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_payments")
async def admin_payments(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.set_state(AdminStates.viewing_payments)

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        try:
            pending_payments = await PaymentOperations.get_pending_payments()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {len(pending_payments)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            pending_payments = []

        # –î–æ–±–∞–≤–ª—è–µ–º timestamp —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "message is not modified"
        import time
        timestamp = int(time.time())

        if not pending_payments:
            text = f"""\
‚úÖ <b>–ü–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>

–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
–ù–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" üîÑ

<code>#{timestamp}</code>\
"""
        else:
            text = f"""\
üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>

–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: <b>{len(pending_payments)}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:

<code>#{timestamp}</code>\
"""

        await callback.message.edit_text(
            text=text,
            reply_markup=AdminKeyboards.get_payments_list_menu(pending_payments),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_payments: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π", show_alert=True)

@router.callback_query(F.data.startswith("moderate_payment:"))
async def moderate_payment(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        payment_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment = await PaymentOperations.get_payment(payment_id)
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserOperations.get_user(payment['user_id'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(current_payment_id=payment_id)
        await state.set_state(AdminStates.processing_payment)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = MessageFormatter.format_payment_info(payment, user)

        method_text = "üè¶ –°–ë–ü" if payment['method'] == 'sbp' else "‚Çø –ö—Ä–∏–ø—Ç–∞"

        text = f"""
üîç <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>

{payment_info}

<b>üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
‚Ä¢ –ú–µ—Ç–æ–¥: {method_text}

<b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å - –ø–ª–∞—Ç–µ–∂ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–æ–º

–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø–ª–∞—Ç–µ–∂–æ–º? ü§î
        """

        await callback.message.edit_text(
            text=text,
            reply_markup=AdminKeyboards.get_payment_moderation_menu(payment_id),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ moderate_payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("confirm_payment:"))
async def confirm_payment(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        payment_id = int(callback.data.split(":")[1])

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        success = await PaymentOperations.confirm_payment(payment_id, callback.from_user.id)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            payment = await PaymentOperations.get_payment(payment_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            notification_service = NotificationService(callback.bot)
            await notification_service.notify_payment_confirmed_with_post_creation(payment_id)

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await AdminOperations.log_admin_action(
                admin_id=callback.from_user.id,
                action="payment_confirmed",
                details={"payment_id": payment_id, "amount": float(payment['amount'])},
                target_payment_id=payment_id
            )

            text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>

–ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –ª–æ–≥–∏

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëç
"""
            await callback.message.edit_text(
                text=text,
                reply_markup=NavigationKeyboards.get_back_to_main_menu(),
                parse_mode="HTML"
            )

            await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("reject_payment:"))
async def reject_payment_start(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        payment_id = int(callback.data.split(":")[1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
        await state.update_data(rejecting_payment_id=payment_id)

        text = f"""
‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ‚Ññ{payment_id}</b>

–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.
–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

<b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏—á–∏–Ω:</b>
‚Ä¢ –ù–µ–ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
‚Ä¢ –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> üëá
        """

        await callback.message.edit_text(text=text, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_payment_start: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, AdminStates.processing_payment)
async def reject_payment_reason(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if message.from_user.id != settings.ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        data = await state.get_data()
        payment_id = data.get('rejecting_payment_id')

        if not payment_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        reason = message.text.strip()

        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        success = await PaymentOperations.reject_payment(payment_id, message.from_user.id, reason)

        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_service = NotificationService(message.bot)
            await notification_service.notify_payment_rejected(payment_id, reason)

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await AdminOperations.log_admin_action(
                admin_id=message.from_user.id,
                action="payment_rejected",
                details={"payment_id": payment_id, "reason": reason},
                target_payment_id=payment_id
            )

            text = f"""
‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!</b>

–ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ:
"{reason}"

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω
‚úÖ –ü—Ä–∏—á–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –ª–æ–≥–∏

–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. üìù
            """

            from keyboards.inline import AdminKeyboards
            await message.answer(
                text=text,
                reply_markup=AdminKeyboards.get_admin_menu(),
                parse_mode="HTML"
            )

        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_payment_reason: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")


@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await AdminOperations.get_stats()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        formatted_stats = MessageFormatter.format_admin_stats(stats)

        text = f"""
{formatted_stats}

üìà <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–µ–π—á–∞—Å

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {format_datetime(None)}</i>
        """

        await callback.message.edit_text(
            text=text,
            reply_markup=AdminKeyboards.get_admin_menu(),
            parse_mode="HTML"
        )

        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await state.set_state(AdminStates.broadcast_text)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await UserOperations.get_all_users()

        text = f"""\
üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–°–µ–π—á–∞—Å –≤ –±–æ—Ç–µ <b>{len(users)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML —Ä–∞–∑–º–µ—Ç–∫—É
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b> üëá\
"""

        await callback.message.edit_text(text=text, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_broadcast_start: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(F.text, AdminStates.broadcast_text)
async def broadcast_text_received(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if message.from_user.id != settings.ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        broadcast_text = message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        await state.update_data(broadcast_text=broadcast_text)
        await state.set_state(AdminStates.broadcast_confirm)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await UserOperations.get_all_users()

        text = f"""\
üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{broadcast_text}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~{len(users) * 0.05 / 60:.1f} –º–∏–Ω—É—Ç

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>
–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞!

–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? ü§î\
"""

        from keyboards.inline import AdminKeyboards
        await message.answer(
            text=text,
            reply_markup=AdminKeyboards.get_broadcast_confirmation_menu(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast_text_received: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")

@router.callback_query(F.data == "confirm_broadcast", AdminStates.broadcast_confirm)
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        data = await state.get_data()
        broadcast_text = data.get('broadcast_text')

        if not broadcast_text:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        await callback.message.edit_text(
            text="üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="HTML"
        )

        await callback.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        notification_service = NotificationService(callback.bot)
        stats = await notification_service.broadcast_message(broadcast_text)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º details –≤ JSON)
        await AdminOperations.log_admin_action(
            admin_id=callback.from_user.id,
            action="broadcast_sent",
            details={
                "message_length": len(broadcast_text),
                "recipients": stats['total'],
                "sent": stats['sent'],
                "failed": stats['failed']
            }
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        final_text = f"""\
‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {stats['total']}
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}
‚Ä¢ –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {stats['failed']}

üìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {round(stats['sent'] / stats['total'] * 100, 1) if stats['total'] > 0 else 0}%

–û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ üéâ\
"""

        from keyboards.inline import AdminKeyboards
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=final_text,
            reply_markup=AdminKeyboards.get_admin_menu(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_broadcast: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ", show_alert=True)

@router.callback_query(F.data == "cancel_broadcast", AdminStates.broadcast_confirm)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        await state.clear()

        text = """
‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.
–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è.

–ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! üòä
        """

        from keyboards.inline import AdminKeyboards
        await callback.message.edit_text(
            text=text,
            reply_markup=AdminKeyboards.get_admin_menu(),
            parse_mode="HTML"
        )

        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_broadcast: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery) -> None:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await UserOperations.get_all_users()
        total_users = len(users)

        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –ø–æ—Å—Ç–∞–º–∏)
        active_users = len([u for u in users if u.get('post_count', 0) > 0])

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recent_users = sorted(users, key=lambda x: x.get('reg_date', ''), reverse=True)[:5]

        text = f"""
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (—Å –ø–æ—Å—Ç–∞–º–∏): {active_users}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {round(active_users/total_users*100, 1) if total_users > 0 else 0}%

üë§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
        """

        for user in recent_users:
            user_info = format_user_info(user)
            reg_date = format_datetime(user.get('reg_date'))
            posts = user.get('post_count', 0)

            text += f"""
‚Ä¢ {user_info}
  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}
  –ü–æ—Å—Ç–æ–≤: {posts}
            """

        text += f"""

<b>üîß –§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</i>
        """

        from keyboards.inline import AdminKeyboards
        await callback.message.edit_text(
            text=text,
            reply_markup=AdminKeyboards.get_admin_menu(),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_users: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_logs")
async def admin_logs(callback: CallbackQuery) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        logs = await AdminOperations.get_admin_logs(limit=10)

        text = f"""\
üìã <b>–õ–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)} –¥–µ–π—Å—Ç–≤–∏–π:</b>

"""

        if logs:
            for log in logs:
                action_text = {
                    'admin_panel_access': 'üîë –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å',
                    'payment_confirmed': '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                    'payment_rejected': '‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω',
                    'broadcast_sent': 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
                }.get(log['action'], f"‚ùì {log['action']}")

                timestamp = format_datetime(log['timestamp'])

                text += f"""\
{action_text}
‚è∞ {timestamp}
"""

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                details = log.get('details', {})
                if details and isinstance(details, dict):
                    if 'payment_id' in details:
                        text += f"üí≥ –ü–ª–∞—Ç–µ–∂: #{details['payment_id']}\n"
                    if 'amount' in details:
                        text += f"üí∞ –°—É–º–º–∞: {details['amount']} ‚ÇΩ\n"
                    if 'recipients' in details:
                        text += f"üì® –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {details['recipients']}\n"
                    if 'reason' in details:
                        text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {details['reason'][:50]}...\n"

                text += "\n"
        else:
            text += "–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        text += f"""\
<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –õ–æ–≥–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è

<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π</i>\
"""

        from keyboards.inline import AdminKeyboards
        await callback.message.edit_text(
            text=text,
            reply_markup=AdminKeyboards.get_admin_menu(),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_logs: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω-—Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@router.message(F.text, StateFilter(AdminStates))
async def wrong_admin_input(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-—Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        if message.from_user.id != settings.ADMIN_ID:
            return

        current_state = await state.get_state()

        if current_state == AdminStates.broadcast_text:
            await message.answer(
                "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
        elif current_state == AdminStates.processing_payment:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ª–∏ –º—ã –ø–ª–∞—Ç–µ–∂
            data = await state.get_data()
            if data.get('rejecting_payment_id'):
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π."
                )
            else:
                await message.answer(
                    "üí≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏."
                )
        else:
            await message.answer("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ wrong_admin_input: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "admin_receipts")
async def admin_receipts_main(callback: CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞–º–∏"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await ReceiptOperations.get_receipt_stats()

        text = f"""
üßæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_payments']}
‚Ä¢ –ß–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent_receipts']}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {stats['pending_receipts']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['today_receipts']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –ë–µ–∑ —á–µ–∫–æ–≤", callback_data="show_no_receipts"),
                InlineKeyboardButton(text="‚úÖ –° —á–µ–∫–∞–º–∏", callback_data="show_with_receipts")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
        ])

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_receipts_main: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "show_no_receipts")
async def show_payments_without_receipts(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ —á–µ–∫–æ–≤"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ —á–µ–∫–æ–≤
        payments = await ReceiptOperations.get_payments_without_receipts()

        if not payments:
            text = """
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>

–í—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–º–µ—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —á–µ–∫–∏.
–ù–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_no_receipts")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_receipts")]
            ])
        else:
            text = f"""
‚ùå <b>–ü–ª–∞—Ç–µ–∂–∏ –±–µ–∑ —á–µ–∫–æ–≤ ({len(payments)} —à—Ç.)</b>

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–µ–∂, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫:
"""

            keyboard_buttons = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
            for payment in payments:
                user_name = payment.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                if payment.get('username'):
                    user_name = f"@{payment['username']}"

                button_text = f"üí≥ {payment['amount']}‚ÇΩ - {user_name}"
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"send_receipt:{payment['payment_id']}"
                    )
                ])

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard_buttons.append([
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_no_receipts")
            ])
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_receipts")
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payments_without_receipts: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "show_with_receipts")
async def show_payments_with_receipts(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —á–µ–∫–∞–º–∏"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å —á–µ–∫–∞–º–∏
        payments = await ReceiptOperations.get_payments_with_receipts()

        if not payments:
            text = """
üìã <b>–ò—Å—Ç–æ—Ä–∏—è —á–µ–∫–æ–≤ –ø—É—Å—Ç–∞</b>

–ü–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞.
"""
        else:
            text = f"""
‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —á–µ–∫–∏ ({len(payments)} —à—Ç.)</b>

–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —á–µ–∫–∏:

"""

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏
            for payment in payments[:10]:
                user_name = payment.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                if payment.get('username'):
                    user_name = f"@{payment['username']}"

                file_icon = "üìÑ" if payment['file_type'] == 'document' else "üì∏"

                text += f"""
{file_icon} <b>{payment['amount']}‚ÇΩ</b> - {user_name}
üìÖ {format_datetime(payment['sent_at'])}

"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_with_receipts")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_receipts")]
        ])

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payments_with_receipts: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("send_receipt:"))
async def prepare_send_receipt(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        payment_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment = await PaymentOperations.get_payment(payment_id)
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–µ–∫ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        if await ReceiptOperations.payment_has_receipt(payment_id):
            await callback.answer("‚ö†Ô∏è –ß–µ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserOperations.get_user(payment['user_id'])
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            receipt_payment_id=payment_id,
            receipt_user_id=payment['user_id']
        )
        await state.set_state(AdminStates.receipt_waiting_file)

        user_info = f"{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}"
        if user.get('username'):
            user_info += f" (@{user['username']})"

        text = f"""
üì® <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞</b>

üí≥ <b>–ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id}</b>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}
üí∞ <b>–°—É–º–º–∞:</b> {format_price(payment['amount'])} ‚ÇΩ
üìÖ <b>–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:</b> {format_datetime(payment['created_at'])}

üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ–∫–∞:</b>
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ üì∏
‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç üìÑ
‚Ä¢ –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã

<i>–û–∂–∏–¥–∞—é —Ñ–∞–π–ª...</i>
"""

        await callback.message.edit_text(text=text, parse_mode="HTML")
        await callback.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ–∫–∞...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ prepare_send_receipt: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.document | F.photo, AdminStates.receipt_waiting_file)
async def handle_receipt_file(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —á–µ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if message.from_user.id != settings.ADMIN_ID:
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        payment_id = data.get('receipt_payment_id')
        user_id = data.get('receipt_user_id')

        if not payment_id or not user_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_id = None
        file_type = None
        file_name = None

        if message.document:
            file_id = message.document.file_id
            file_type = "document"
            file_name = message.document.file_name or "receipt.pdf"
        elif message.photo:
            file_id = message.photo[-1].file_id  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file_type = "photo"
            file_name = "receipt.jpg"

        if not file_id:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment = await PaymentOperations.get_payment(payment_id)
        user = await UserOperations.get_user(user_id)

        receipt_text = f"""
üßæ <b>–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ</b>

üí≥ <b>–ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id}</b>
üí∞ <b>–°—É–º–º–∞:</b> {format_price(payment['amount'])} ‚ÇΩ
üìÖ <b>–î–∞—Ç–∞:</b> {format_datetime(payment['created_at'])}
üõç <b>–£—Å–ª—É–≥–∞:</b> –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ @richmondmarket

<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!</b>
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @balykoal
"""

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ file_id
            if file_type == "document":
                await message.bot.send_document(
                    chat_id=user_id,
                    document=file_id,
                    caption=receipt_text,
                    parse_mode="HTML"
                )
            else:
                await message.bot.send_photo(
                    chat_id=user_id,
                    photo=file_id,
                    caption=receipt_text,
                    parse_mode="HTML"
                )

        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ file_id: {send_error}. –ü—Ä–æ–±—É—é —á–µ—Ä–µ–∑ download...")

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            downloaded = await message.bot.download(file_id)
            input_file = FSInputFile(downloaded.name)

            if file_type == "document":
                await message.bot.send_document(
                    chat_id=user_id,
                    document=input_file,
                    caption=receipt_text,
                    parse_mode="HTML"
                )
            else:
                await message.bot.send_photo(
                    chat_id=user_id,
                    photo=input_file,
                    caption=receipt_text,
                    parse_mode="HTML"
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        receipt_id = await ReceiptOperations.create_receipt(
            payment_id=payment_id,
            user_id=user_id,
            admin_id=message.from_user.id,
            file_id=file_id,
            file_type=file_type,
            file_name=file_name
        )

        # –õ–æ–≥–∏—Ä—É–µ–º
        await AdminOperations.log_admin_action(
            admin_id=message.from_user.id,
            action="receipt_sent",
            details={
                "receipt_id": receipt_id,
                "payment_id": payment_id,
                "file_type": file_type
            },
            target_user_id=user_id,
            target_payment_id=payment_id
        )

        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        user_info = f"{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}"
        if user.get('username'):
            user_info += f" (@{user['username']})"

        success_text = f"""
‚úÖ <b>–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}
üí≥ <b>–ü–ª–∞—Ç–µ–∂:</b> ‚Ññ{payment_id}
üí∞ <b>–°—É–º–º–∞:</b> {format_price(payment['amount'])} ‚ÇΩ
üìé <b>–§–∞–π–ª:</b> {file_name}

–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞–º–∏", callback_data="admin_receipts")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_menu")]
        ])

        await message.answer(
            text=success_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_receipt_file: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞
@router.message(AdminStates.receipt_waiting_file)
async def wrong_receipt_file_type(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —á–µ–∫–∞"""
    if message.from_user.id != settings.ADMIN_ID:
        await state.clear()
        return

    await message.answer(
        "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ–∫–∞:\n"
        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏\n"
        "‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç üìÑ\n"
        "‚Ä¢ –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    )

#BACKUP
@router.callback_query(F.data == "admin_backups")
async def admin_backups_main(callback: CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞–º–∏"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        backup_manager = BackupManager()
        stats = await backup_manager.get_backup_stats()

        newest = stats.get('newest_backup')
        newest_str = newest['created'].strftime('%d.%m.%Y %H:%M') if newest else "–ù–µ—Ç"

        text = f"""
üíæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ Richmond Market</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {stats.get('total_backups', 0)}
‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('total_size_mb', 0)} MB
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: {newest_str}

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π)

‚ö° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã:</b> –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì• –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="create_backup"),
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="list_backups")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="backup_stats"),
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="cleanup_backups")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")
            ]
        ])

        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                pass
            else:
                raise
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ admin_backups_main: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "create_backup")
async def create_backup_handler(callback: CallbackQuery) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (–≤—Ä—É—á–Ω—É—é –∏–∑ –∞–¥–º–∏–Ω–∫–∏)"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        await callback.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
        try:
            await callback.message.edit_text(
                text="üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ Richmond Market...</b>\n\nüîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            pass

        backup_manager = BackupManager()
        result = await backup_manager.create_backup()

        if result.get('success'):
            size_mb = round(result['size'] / 1024 / 1024, 2)
            text = f"""
‚úÖ <b>–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {result['created'].strftime('%d.%m.%Y %H:%M:%S')}
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb} MB
‚Ä¢ –§–∞–π–ª: {result['name']}
‚Ä¢ –°–∂–∞—Ç–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ (gzip -9)

–ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ /backups.
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="list_backups")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="backup_stats")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups")]
            ])
        else:
            text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞!</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞.
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups")]
            ])

        await callback.message.edit_text(text=text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ create_backup_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞", show_alert=True)


@router.callback_query(F.data == "list_backups")
async def list_backups_handler(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        bm = BackupManager()
        backups = bm.get_backup_list()

        if not backups:
            await callback.message.edit_text(
                text="üìÅ –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –ø—É—Å—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups")]
                ]),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        text = "üìÅ <b>–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤</b>\n\n"
        kb_rows = []
        for b in backups[:20]:
            created = b['created'].strftime('%d.%m.%Y %H:%M')
            text += f"‚Ä¢ {b['name']} ‚Äî {b['size_mb']} MB ‚Äî {created}\n"
            kb_rows.append([
                InlineKeyboardButton(text=f"‚¨áÔ∏è {b['name'][:20]}", callback_data=f"backup_download:{b['name']}"),
                InlineKeyboardButton(text="‚ö†Ô∏è", callback_data=f"backup_actions:{b['name']}")
            ])

        kb_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb_rows)

        await callback.message.edit_text(text=text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ list_backups_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup_actions:"))
async def backup_actions_handler(callback: CallbackQuery) -> None:
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±—ç–∫–∞–ø–æ–º"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        _, name = callback.data.split(":", 1)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"backup_download:{name}")],
            [InlineKeyboardButton(text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (confirm)", callback_data=f"backup_confirm_restore:{name}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å (confirm)", callback_data=f"backup_confirm_delete:{name}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="list_backups")]
        ])

        await callback.message.edit_text(
            text=f"üìÅ <b>–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è:</b>\n{name}",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ backup_actions_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup_download:"))
async def backup_download_handler(callback: CallbackQuery) -> None:
    """–°–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É)"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        _, name = callback.data.split(":", 1)
        bm = BackupManager()
        path = Path(bm.backup_dir) / name

        if not path.exists():
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await callback.message.answer_document(document=FSInputFile(str(path)), caption=f"üì• –ë—ç–∫–∞–ø: {name}")
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ backup_download_handler: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", show_alert=True)


@router.callback_query(F.data.startswith("backup_confirm_delete:"))
async def backup_confirm_delete(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        _, name = callback.data.split(":", 1)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"backup_delete:{name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="list_backups")]
        ])
        await callback.message.edit_text(text=f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø <b>{name}</b>?", reply_markup=kb, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ backup_confirm_delete: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup_delete:"))
async def backup_delete_handler(callback: CallbackQuery) -> None:
    """–£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        _, name = callback.data.split(":", 1)
        bm = BackupManager()
        res = await bm.delete_backup(name)
        if res.get('success'):
            await callback.message.edit_text(text=f"üóë –ë—ç–∫–∞–ø <b>{name}</b> —É–¥–∞–ª—ë–Ω.\n{res.get('message')}", parse_mode="HTML",
                                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="list_backups")]]))
        else:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {res.get('message')}", show_alert=True)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ backup_delete_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup_confirm_restore:"))
async def backup_confirm_restore(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∫—Ä–∞–π–Ω–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        _, name = callback.data.split(":", 1)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup_restore:{name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="list_backups")]
        ])
        await callback.message.edit_text(text=f"üö® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ <b>{name}</b> –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –±–∞–∑—É. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=kb, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ backup_confirm_restore: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup_restore:"))
async def backup_restore_handler(callback: CallbackQuery) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ (–≤–Ω–∏–º–∞–Ω–∏–µ: –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è)"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        _, name = callback.data.split(":", 1)
        bm = BackupManager()
        await callback.message.edit_text(text=f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ {name}...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.", parse_mode="HTML")
        res = await bm.restore_backup(name)
        if res.get('success'):
            await callback.message.edit_text(text=f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {res.get('message')}", parse_mode="HTML",
                                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups")]]))
        else:
            await callback.message.edit_text(text=f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {res.get('message')}", parse_mode="HTML",
                                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="list_backups")]]))
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ backup_restore_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "backup_stats")
async def backup_stats_handler(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ç–∫–∞–ø–æ–≤"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        bm = BackupManager()
        stats = await bm.get_backup_stats()

        nb = stats.get('newest_backup')
        nb_str = f"{nb['name']} ({nb['size_mb']} MB) ‚Äî {nb['created'].strftime('%d.%m.%Y %H:%M')}" if nb else "–ù–µ—Ç"

        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤</b>

‚Ä¢ –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {stats.get('total_backups', 0)}
‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('total_size_mb', 0)} MB
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('average_size_mb', 0)} MB
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: {nb_str}
"""
        await callback.message.edit_text(text=text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups")]]), parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ backup_stats_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cleanup_backups")
async def cleanup_backups_handler(callback: CallbackQuery) -> None:
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º)"""
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        bm = BackupManager()
        res = await bm.clean_old_backups(days=7)
        if res.get('deleted_count', 0) > 0:
            freed_mb = round(res['freed_space']/1024/1024, 2)
            await callback.message.edit_text(text=f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£–¥–∞–ª–µ–Ω–æ: {res['deleted_count']} —Ñ–∞–π–ª–æ–≤\n–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {freed_mb} MB", parse_mode="HTML",
                                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backups")]]))
        else:
            await callback.answer("–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ cleanup_backups_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)