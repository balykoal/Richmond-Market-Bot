"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback'–∏, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from database import PostOperations, UserOperations, PaymentOperations
from utils.helpers import MessageFormatter, format_user_info
from utils.states import PostCreation
from config import settings, PaymentStatus

logger = logging.getLogger(__name__)
router = Router()


async def safe_callback_answer(callback: CallbackQuery, text: str = None, show_alert: bool = False):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–∏–π —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        await callback.answer(text, show_alert=show_alert)
    except TelegramBadRequest as e:
        if "query is too old" in str(e) or "query ID is invalid" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ callback'–∏
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –æ—Ç {callback.from_user.id}: {callback.data}")
            pass
        else:
            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            raise e
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ safe_callback_answer: {e}")


@router.callback_query(F.data.startswith("view_post:"))
async def view_post_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞
    """
    try:
        post_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post = await PostOperations.get_post(post_id)
        if not post:
            await safe_callback_answer(callback, "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if post['user_id'] != callback.from_user.id:
            await safe_callback_answer(callback, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø–æ—Å—Ç", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
        post_info = MessageFormatter.format_post_info(post)

        status_text = {
            'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
            'published': '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
            'archived': 'üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω'
        }.get(post['status'], '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

        text = f"""
üìÑ <b>–î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞</b>

{post_info}

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_text}
‚Ä¢ ID –ø–æ—Å—Ç–∞: {post_id}
"""

        if post['message_id']:
            text += f"\n‚Ä¢ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {post['message_id']}"
            text += f"\nüîó –°—Å—ã–ª–∫–∞: https://t.me/rc_exchng/{post['message_id']}"

        from keyboards.inline import NavigationKeyboards
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=NavigationKeyboards.get_back_to_main_menu(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except TelegramBadRequest as e:
            if "query is too old" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.answer(
                    text=text,
                    reply_markup=NavigationKeyboards.get_back_to_main_menu(),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
            else:
                raise e

        await safe_callback_answer(callback)

    except ValueError:
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_post_callback: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("user_profile:"))
async def user_profile_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    """
    try:
        if callback.from_user.id != settings.ADMIN_ID:
            await safe_callback_answer(callback, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º payment_id –∏–∑ callback_data
        payment_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment = await PaymentOperations.get_payment(payment_id)

        if not payment:
            await safe_callback_answer(callback, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserOperations.get_user(payment['user_id'])
        if not user:
            await safe_callback_answer(callback, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_posts = await PostOperations.get_user_posts(payment['user_id'])
        user_payments = await PaymentOperations.get_user_payments(payment['user_id'])

        from utils.helpers import format_datetime

        text = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
{format_user_info(user)}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ ID: {user['user_id']}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_datetime(user.get('reg_date'))}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(user_posts)}
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {len(user_payments)}
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0)} ‚ÇΩ

<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {format_datetime(user_posts[0].get('created_at')) if user_posts else '–ù–µ—Ç –ø–æ—Å—Ç–æ–≤'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {format_datetime(user_payments[0].get('created_at')) if user_payments else '–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π'}

<b>üîí –°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.get('is_blocked', False) else '–ù–µ—Ç'}
"""

        from keyboards.inline import AdminKeyboards
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=AdminKeyboards.get_admin_menu(),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "query is too old" in str(e):
                await callback.message.answer(
                    text=text,
                    reply_markup=AdminKeyboards.get_admin_menu(),
                    parse_mode="HTML"
                )
            else:
                raise e

        await safe_callback_answer(callback)

    except ValueError:
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_profile_callback: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("continue_post:"))
async def continue_post_creation(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        payment_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment = await PaymentOperations.get_payment(payment_id)

        if not payment:
            await safe_callback_answer(callback, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if payment['user_id'] != callback.from_user.id:
            await safe_callback_answer(callback, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂", show_alert=True)
            return

        if payment['status'] != PaymentStatus.CONFIRMED:
            await safe_callback_answer(callback, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ –ø–æ —Å—É–º–º–µ
        post_type = 'regular'
        if payment['amount'] == settings.PINNED_POST_PRICE:
            post_type = 'pinned'
        elif payment['amount'] == settings.REGULAR_POST_PRICE:
            post_type = 'regular'

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        await state.set_state(PostCreation.waiting_photos)
        await state.update_data(
            payment_id=payment_id,
            post_type=post_type,
            price=payment['amount'],
            photos=[]
        )

        post_type_name = "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π" if post_type == 'pinned' else "–û–±—ã—á–Ω—ã–π"

        text = f"""
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>

–ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!
–¢–∏–ø –ø–æ—Å—Ç–∞: <b>{post_type_name}</b>

üì∏ <b>–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç {settings.MIN_PHOTOS} –¥–æ {settings.MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã
‚Ä¢ –ß–µ—Ç–∫–∏–µ —Å–Ω–∏–º–∫–∏
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏</b>
"""

        try:
            await callback.message.edit_text(text=text, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "query is too old" in str(e):
                await callback.message.answer(text=text, parse_mode="HTML")
            else:
                raise e

        await safe_callback_answer(callback, "üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞!")

    except ValueError:
        await safe_callback_answer(callback, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ continue_post_creation: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö callback'–æ–≤
@router.callback_query()
async def unknown_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    try:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –æ—Ç {callback.from_user.id}: {callback.data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ª–∏ —ç—Ç–æ callback
        try:
            await callback.answer(
                "‚ùì –≠—Ç–æ —Å—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                show_alert=True
            )
        except TelegramBadRequest as e:
            if "query is too old" in str(e) or "query ID is invalid" in str(e):
                logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback: {callback.data}")
                return
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.answer(
                        "‚ùì –≠—Ç–æ —Å—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                    )
                except:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback {callback.data}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unknown_callback: {e}")
