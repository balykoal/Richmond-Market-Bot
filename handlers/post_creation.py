"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
FSM –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

import logging
from datetime import datetime
import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from database import PostOperations, UserOperations, PaymentOperations
from keyboards.inline import PostKeyboards, MainKeyboards
from utils.states import PostCreation
from utils.validators import DataValidators
from utils.helpers import MediaHelper, MessageFormatter, send_notification_to_admin, format_price, PriceHelper
from services.post_service import PostService
from config import settings, ItemCondition, PostType

logger = logging.getLogger(__name__)
router = Router()


async def safe_callback_answer(callback: CallbackQuery, text: str = None, show_alert: bool = False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        await callback.answer(text, show_alert=show_alert)
    except TelegramBadRequest as e:
        if "query is too old" in str(e) or "query ID is invalid" in str(e):
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –æ—Ç {callback.from_user.id}: {callback.data}")
        else:
            raise e
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ safe_callback_answer: {e}")


async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "query is too old" in str(e) or "message is not modified" in str(e):
            try:
                await callback.message.answer(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            except:
                pass
        else:
            raise e


@router.message(F.photo, PostCreation.waiting_photos)
async def receive_photo(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø"""
    try:
        data = await state.get_data()
        photos = data.get('photos', [])
        media_group_id = message.media_group_id
        current_media_group = data.get('media_group_id')

        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        best_photo = MediaHelper.get_largest_photo(message.photo)
        photos.append(best_photo.file_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(photos=photos)

        if media_group_id:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã
            if current_media_group != media_group_id:
                await state.update_data(
                    media_group_id=media_group_id,
                    processing_media_group=True
                )

                # –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã
                await asyncio.sleep(1.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                final_data = await state.get_data()
                final_photos = final_data.get('photos', [])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É –∂–µ –≥—Ä—É–ø–ø—É
                if final_data.get('media_group_id') == media_group_id:
                    await process_photos_complete(message, state, len(final_photos))
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø—ã - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∂–¥–µ–º

        else:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
            await process_photos_complete(message, state, 1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def process_photos_complete(message: Message, state: FSMContext, new_photos_count: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        data = await state.get_data()
        photos = data.get('photos', [])
        total_photos = len(photos)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        await state.update_data(
            processing_media_group=False,
            media_group_id=None
        )

        if total_photos >= settings.MAX_PHOTOS:
            # –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
            if data.get('is_editing'):
                await back_to_preview_from_message(message, state)
            else:
                await state.set_state(PostCreation.waiting_title)
                text = f"""
üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>

–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {total_photos} –∏–∑ {settings.MAX_PHOTOS} —Ñ–æ—Ç–æ

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏ –º–æ–¥–µ–ª—å
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
"""
                await message.answer(text, parse_mode="HTML")

        elif total_photos >= settings.MIN_PHOTOS:
            # –ú–∏–Ω–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            text = f"""
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ç–æ–≤—ã</b>

–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {total_photos} —Ñ–æ—Ç–æ

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="photos_next_step")
            ]])
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            # –ù—É–∂–Ω–æ –µ—â–µ —Ñ–æ—Ç–æ
            remaining = settings.MIN_PHOTOS - total_photos
            text = f"""
üì∏ <b>–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>

–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {total_photos} –∏–∑ {settings.MIN_PHOTOS} (–º–∏–Ω–∏–º—É–º) —Ñ–æ—Ç–æ

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ {remaining} —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
"""
            await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_photos_complete: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")


@router.callback_query(F.data == "photos_next_step", PostCreation.waiting_photos)
async def photos_next_step_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        data = await state.get_data()
        photos = data.get('photos', [])

        if len(photos) < settings.MIN_PHOTOS:
            await safe_callback_answer(callback, f"‚ùå –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏–º—É–º {settings.MIN_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", show_alert=True)
            return

        if data.get('is_editing'):
            await back_to_preview_handler(callback, state)
            return

        await state.set_state(PostCreation.waiting_title)
        text = f"""
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ç–æ–≤—ã</b>

–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(photos)} —Ñ–æ—Ç–æ

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏ –º–æ–¥–µ–ª—å
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
"""
        await safe_edit_message(callback, text)
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ photos_next_step_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("post_type:"), PostCreation.choosing_post_type)
async def post_type_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞"""
    try:
        post_type = callback.data.split(":")[1]
        is_admin = callback.from_user.id == settings.ADMIN_ID

        await state.update_data(post_type=post_type)
        price = PriceHelper.get_post_price(post_type)
        post_type_name = "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π" if post_type == PostType.PINNED else "–û–±—ã—á–Ω—ã–π"

        if is_admin:
            # –î–ª—è –∞–¥–º–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            payment_id = await PaymentOperations.create_payment(
                user_id=callback.from_user.id,
                amount=price,
                method="admin_auto",
                currency="RUB"
            )

            if payment_id:
                await PaymentOperations.confirm_payment(payment_id, callback.from_user.id)
                await state.update_data(payment_id=payment_id, price=price)
                await state.set_state(PostCreation.waiting_photos)

                text = f"""
üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –ø–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>

–¢–∏–ø –ø–æ—Å—Ç–∞: <b>{post_type_name}</b>
–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{format_price(price)} ‚ÇΩ</b>
–ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞!

üì∏ <b>–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç {settings.MIN_PHOTOS} –¥–æ {settings.MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:
"""
                await safe_edit_message(callback, text)
                await safe_callback_answer(callback, "üëë –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                return

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await state.set_state(PostCreation.choosing_payment_method)
        text = f"""
üí≥ <b>–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã</b>

–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{post_type_name} –ø–æ—Å—Ç</b>
–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{format_price(price)} ‚ÇΩ</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:

üè¶ <b>–°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)</b>
‚Ä¢ –û–ø–ª–∞—Ç–∞ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
"""
        await safe_edit_message(callback, text, MainKeyboards.get_payment_method_menu())
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ post_type_selected: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, PostCreation.waiting_title)
async def receive_title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        title = message.text.strip()

        validation = DataValidators.validate_title(title)
        if not validation.is_valid:
            await message.answer(f"‚ùå {validation.error_message}")
            return

        await state.update_data(title=title)
        data = await state.get_data()

        if data.get('is_editing'):
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await back_to_preview_from_message(message, state)
            return

        await state.set_state(PostCreation.waiting_condition)
        text = f"""
‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>

<b>"{title}"</b>

–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:

‚ú® <b>–ù–æ–≤–æ–µ</b> - —Ç–æ–≤–∞—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ
üîÑ <b>–ë/—É</b> - —Ç–æ–≤–∞—Ä –±—ã–ª –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
"""
        await message.answer(text, reply_markup=PostKeyboards.get_item_condition_menu(), parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_title: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data.startswith("condition:"), PostCreation.waiting_condition)
async def condition_selected(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        condition = callback.data.split(":")[1]
        await state.update_data(condition=condition)

        data = await state.get_data()
        if data.get('is_editing'):
            await back_to_preview_handler(callback, state)
            return

        await state.set_state(PostCreation.waiting_description)
        condition_text = "‚ú® –ù–æ–≤–æ–µ" if condition == ItemCondition.NEW else "üîÑ –ë/—É"

        text = f"""
‚úÖ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–æ!</b>

–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{condition_text}</b>

–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.

üí° <b>–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:</b>
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å
‚Ä¢ –î–µ—Ñ–µ–∫—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

<b>–ú–∏–Ω–∏–º—É–º:</b> 20 —Å–∏–º–≤–æ–ª–æ–≤
<b>–ú–∞–∫—Å–∏–º—É–º:</b> 1000 —Å–∏–º–≤–æ–ª–æ–≤

<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
"""
        await safe_edit_message(callback, text)
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ condition_selected: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, PostCreation.waiting_description)
async def receive_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        description = message.text.strip()

        validation = DataValidators.validate_description(description)
        if not validation.is_valid:
            await message.answer(f"‚ùå {validation.error_message}")
            return

        await state.update_data(description=description)
        data = await state.get_data()

        if data.get('is_editing'):
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
            await back_to_preview_from_message(message, state)
            return

        await state.set_state(PostCreation.waiting_price)
        text = """
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>

–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.

üí° <b>–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É/–∑–∞–ø—è—Ç—É—é –¥–ª—è –∫–æ–ø–µ–µ–∫
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: 15000, 15000.50, 25,5
‚Ä¢ –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0

<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:</b>
"""
        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_description: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(F.text, PostCreation.waiting_price)
async def receive_price(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        validation, price = DataValidators.validate_price(message.text)
        if not validation.is_valid:
            await message.answer(f"‚ùå {validation.error_message}")
            return

        await state.update_data(price=price)
        data = await state.get_data()

        if data.get('is_editing'):
            await message.answer("‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
            await back_to_preview_from_message(message, state)
            return

        await state.set_state(PostCreation.waiting_contact)
        text = f"""
‚úÖ <b>–¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

–¶–µ–Ω–∞: <b>{format_price(price)} ‚ÇΩ</b>

–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:</b>
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ –ò–º—è Telegram (@username)

<b>–ü—Ä–∏–º–µ—Ä:</b>
+7 (999) 123-45-67
@username

<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>
"""
        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_price: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(F.text, PostCreation.waiting_contact)
async def receive_contact(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        contact_info = message.text.strip()

        validation = DataValidators.validate_contact_info(contact_info)
        if not validation.is_valid:
            await message.answer(f"‚ùå {validation.error_message}")
            return

        await state.update_data(contact_info=contact_info)
        data = await state.get_data()

        if data.get('is_editing'):
            await back_to_preview_from_message(message, state)
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_post_preview(message, state, data)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_contact: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def show_post_preview(message: Message, state: FSMContext, data: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞"""
    try:
        await state.set_state(PostCreation.confirming_post)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞
        post_preview = MessageFormatter.format_post_info({
            'title': data['title'],
            'condition': data['condition'],
            'description': data['description'],
            'price': data['price'],
            'contact_info': data['contact_info'],
            'post_type': data['post_type'],
            'created_at': message.date
        })

        photos = data.get('photos', [])

        text = f"""
‚úÖ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>

<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>

{post_preview}

–í—Å–µ –≤–µ—Ä–Ω–æ? –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?
"""

        if photos and len(photos) > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            media = []
            for i, file_id in enumerate(photos):
                if i == 0:
                    media.append(InputMediaPhoto(media=file_id, caption=text, parse_mode="HTML"))
                else:
                    media.append(InputMediaPhoto(media=file_id))

            await message.answer_media_group(media=media)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=PostKeyboards.get_post_confirmation_menu()
            )
        else:
            # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                text,
                reply_markup=PostKeyboards.get_post_confirmation_menu(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_post_preview: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–≤—å—é.")


@router.callback_query(F.data == "confirm_post", PostCreation.confirming_post)
async def confirm_post(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    try:
        data = await state.get_data()
        user_id = callback.from_user.id

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        post_id = await PostOperations.create_post(
            user_id=user_id,
            photos=data['photos'],
            title=data['title'],
            condition=data['condition'],
            description=data['description'],
            price=data['price'],
            contact_info=data['contact_info'],
            post_type=data['post_type']
        )

        if not post_id:
            await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞", show_alert=True)
            return

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
        post_service = PostService(callback.bot)
        success, message_id = await post_service.publish_post(post_id)

        if success:
            await PostOperations.publish_post(post_id, message_id)
            await UserOperations.increment_post_count(user_id)
            await state.clear()

            text = f"""
üéâ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>

‚úÖ –í–∞—à –ø–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ @richmondmarket
üìä ID –ø–æ—Å—Ç–∞: {post_id}
üîó –°—Å—ã–ª–∫–∞: https://t.me/richmond_market/{message_id}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –í–∞—à –ø–æ—Å—Ç —É–≤–∏–¥—è—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!

–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç?
"""
            await safe_edit_message(
                callback,
                text,
                MainKeyboards.get_main_menu(callback.from_user.id, settings.ADMIN_ID)
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            admin_text = f"""
üéâ <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</b>

–ü–æ—Å—Ç ‚Ññ{post_id}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{callback.from_user.username or '–±–µ–∑ username'})
–¢–∏–ø: {"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π" if data['post_type'] == 'pinned' else "–û–±—ã—á–Ω—ã–π"}
–¢–æ–≤–∞—Ä: {data['title']}
–¶–µ–Ω–∞: {data['price']} ‚ÇΩ
"""
            await send_notification_to_admin(callback.bot, admin_text)
        else:
            await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)

        await safe_callback_answer(callback, "üéâ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_post: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data == "cancel_post", PostCreation.confirming_post)
async def cancel_post(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        await state.clear()
        text = """
‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>

–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.

–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!
"""
        await safe_edit_message(
            callback,
            text,
            MainKeyboards.get_main_menu(callback.from_user.id, settings.ADMIN_ID)
        )
        await safe_callback_answer(callback, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_post: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "edit_post", PostCreation.confirming_post)
async def edit_post_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        data = await state.get_data()
        await state.update_data(is_editing=True)

        current_photos_count = len(data.get('photos', []))
        current_title = data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>

üìä <b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ üì∏ –§–æ—Ç–æ: {current_photos_count} —à—Ç.
‚Ä¢ üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {current_title[:30]}...

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="edit_photos"),
                InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")
            ],
            [
                InlineKeyboardButton(text="üè∑ –°–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data="edit_condition"),
                InlineKeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")
            ],
            [
                InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_price"),
                InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="edit_contact")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_preview")
            ]
        ])

        await safe_edit_message(callback, text, keyboard)
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_post_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "edit_title", PostCreation.confirming_post)
async def edit_title_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    try:
        current_data = await state.get_data()
        current_data['is_editing'] = True
        await state.set_state(PostCreation.waiting_title)
        await state.set_data(current_data)

        current_title = current_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        text = f"""
üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>"{current_title}"</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
"""
        await safe_edit_message(callback, text)
        await safe_callback_answer(callback, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_title_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "edit_description", PostCreation.confirming_post)
async def edit_description_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        current_data = await state.get_data()
        current_data['is_editing'] = True
        await state.set_state(PostCreation.waiting_description)
        await state.set_data(current_data)

        current_description = current_data.get('description', '')
        text = f"""
üìÑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>

–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
"{current_description}"

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
"""
        await safe_edit_message(callback, text)
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_description_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "edit_price", PostCreation.confirming_post)
async def edit_price_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    try:
        current_data = await state.get_data()
        current_data['is_editing'] = True
        await state.set_state(PostCreation.waiting_price)
        await state.set_data(current_data)

        current_price = current_data.get('price', 0)
        text = f"""
üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã</b>

–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{format_price(current_price)} ‚ÇΩ</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:
"""
        await safe_edit_message(callback, text)
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_price_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "edit_condition", PostCreation.confirming_post)
async def edit_condition_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        current_data = await state.get_data()
        current_data['is_editing'] = True
        await state.set_state(PostCreation.waiting_condition)
        await state.set_data(current_data)

        text = """
üè∑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:
"""
        await safe_edit_message(callback, text, PostKeyboards.get_item_condition_menu())
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_condition_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "edit_contact", PostCreation.confirming_post)
async def edit_contact_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        current_data = await state.get_data()
        current_data['is_editing'] = True
        await state.set_state(PostCreation.waiting_contact)
        await state.set_data(current_data)

        current_contact = current_data.get('contact_info', '')
        text = f"""
üìû <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>

–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
{current_contact}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
"""
        await safe_edit_message(callback, text)
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_contact_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "edit_photos", PostCreation.confirming_post)
async def edit_photos_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        current_data = await state.get_data()
        current_data['photos'] = []  # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
        current_data['is_editing'] = True
        await state.set_state(PostCreation.waiting_photos)
        await state.set_data(current_data)

        text = """
üì∏ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ.
(–°—Ç–∞—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã)

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:
"""
        await safe_edit_message(callback, text)
        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_photos_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_preview")
async def back_to_preview_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
    try:
        await state.update_data(is_editing=False)
        data = await state.get_data()
        photos = data.get('photos', [])
        await state.set_state(PostCreation.confirming_post)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        post_preview = MessageFormatter.format_post_info({
            'title': data.get('title', ''),
            'condition': data.get('condition', ''),
            'description': data.get('description', ''),
            'price': data.get('price', 0),
            'contact_info': data.get('contact_info', ''),
            'post_type': data.get('post_type', ''),
            'photos': photos,
            'created_at': datetime.now()
        })

        text = f"""
‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>

<b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç:</b>

{post_preview}

–í—Å–µ –≤–µ—Ä–Ω–æ? –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?
"""

        if photos and len(photos) > 0:
            try:
                await callback.message.delete()
            except:
                pass

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å –ø—Ä–µ–≤—å—é
            media = []
            for i, file_id in enumerate(photos):
                if i == 0:
                    media.append(InputMediaPhoto(media=file_id, caption=text, parse_mode="HTML"))
                else:
                    media.append(InputMediaPhoto(media=file_id))

            await callback.message.answer_media_group(media=media)
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=PostKeyboards.get_post_confirmation_menu()
            )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–≤—å—é
            await safe_edit_message(callback, text, PostKeyboards.get_post_confirmation_menu())

        await safe_callback_answer(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_preview_handler: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", show_alert=True)


async def back_to_preview_from_message(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await state.update_data(is_editing=False)
        await state.set_state(PostCreation.confirming_post)

        data = await state.get_data()
        photos = data.get('photos', [])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        post_preview = MessageFormatter.format_post_info({
            'title': data.get('title', ''),
            'condition': data.get('condition', ''),
            'description': data.get('description', ''),
            'price': data.get('price', 0),
            'contact_info': data.get('contact_info', ''),
            'post_type': data.get('post_type', ''),
            'created_at': datetime.now(),
            'photos': photos
        })

        text = f"""
‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>

<b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç:</b>

{post_preview}

–í—Å–µ –≤–µ—Ä–Ω–æ? –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?
"""

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if photos and len(photos) > 0:
            media = []
            for i, file_id in enumerate(photos):
                if i == 0:
                    media.append(InputMediaPhoto(media=file_id, caption=text, parse_mode="HTML"))
                else:
                    media.append(InputMediaPhoto(media=file_id))

            await message.answer_media_group(media=media)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=PostKeyboards.get_post_confirmation_menu()
            )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                text,
                reply_markup=PostKeyboards.get_post_confirmation_menu(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_preview_from_message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–µ–≤—å—é")


@router.message(~F.photo, PostCreation.waiting_photos)
async def wrong_photo_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞.")


@router.message(~F.text, PostCreation.waiting_title)
async def wrong_title_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º.")


@router.message(~F.text, PostCreation.waiting_description)
async def wrong_description_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º.")


@router.message(~F.text, PostCreation.waiting_price)
async def wrong_price_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ü–µ–Ω—ã"""
    await message.answer("üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —á–∏—Å–ª–æ–º.")


@router.message(~F.text, PostCreation.waiting_contact)
async def wrong_contact_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º.")