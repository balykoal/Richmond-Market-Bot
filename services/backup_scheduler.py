"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è Richmond Market Bot
"""

import asyncio
import logging
from datetime import datetime, time
from typing import Any, Dict

from utils.backup import BackupManager
from utils.helpers import send_notification_to_admin

logger = logging.getLogger(__name__)


class BackupScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤"""

    def __init__(self, bot):
        self.bot = bot
        self.backup_manager = BackupManager()
        self.is_running = False
        self.last_backup_date = None
        self.last_cleanup_date = None

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ç–∫–∞–ø–æ–≤"""
        self.is_running = True
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ç–∫–∞–ø–æ–≤ Richmond Market –∑–∞–ø—É—â–µ–Ω")

        while self.is_running:
            try:
                now = datetime.now()

                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
                if (time(3, 0) <= now.time() <= time(3, 30) and
                    (not self.last_backup_date or self.last_backup_date.date() != now.date())):

                    await self.create_daily_backup()
                    self.last_backup_date = now

                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 4:00
                if (now.weekday() == 6 and time(4, 0) <= now.time() <= time(4, 30) and
                    (not self.last_cleanup_date or self.last_cleanup_date.date() != now.date())):

                    await self.cleanup_old_backups()
                    self.last_cleanup_date = now

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
                await asyncio.sleep(900)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –±—ç–∫–∞–ø–æ–≤: {e}")
                await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç

    async def create_daily_backup(self):
        """–°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø"""
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞")

            result = await self.backup_manager.create_backup()

            if result['success']:
                size_mb = round(result['size'] / 1024 / 1024, 2)

                await send_notification_to_admin(
                    self.bot,
                    f"""‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω</b>

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –§–∞–π–ª: {result['name']}
‚Ä¢ –†–∞–∑–º–µ—Ä: {size_mb} MB
‚Ä¢ –í—Ä–µ–º—è: {result['created'].strftime('%d.%m.%Y %H:%M')}

–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø Richmond Market —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ."""
                )

                logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {result['name']}")

            else:
                await send_notification_to_admin(
                    self.bot,
                    f"""‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø Richmond Market.

<b>–û—à–∏–±–∫–∞:</b> {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã!"""
                )

                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {result.get('message')}")

        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")

            try:
                await send_notification_to_admin(
                    self.bot,
                    f"""üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞:

<b>–û—à–∏–±–∫–∞:</b> {str(e)[:200]}

–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –±—ç–∫–∞–ø–æ–≤!"""
                )
            except:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ç–∫–∞–ø–∞")

    async def cleanup_old_backups(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤")

            cleanup_result = await self.backup_manager.clean_old_backups(days=7)

            if cleanup_result['deleted_count'] > 0:
                freed_mb = round(cleanup_result['freed_space'] / 1024 / 1024, 2)

                await send_notification_to_admin(
                    self.bot,
                    f"""üóë <b>–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleanup_result['deleted_count']}
‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {freed_mb} MB
‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {cleanup_result['days']} –¥–Ω–µ–π

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."""
                )

                logger.info(f"–û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã: {cleanup_result['deleted_count']} —Ñ–∞–π–ª–æ–≤")
            else:
                logger.info("–°—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ç–∫–∞–ø–æ–≤ Richmond Market –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def force_backup(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)"""
        try:
            return await self.backup_manager.create_backup()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {str(e)}"
            }
