"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import logging
from typing import List, Dict
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import PaymentOperations, UserOperations
from utils.helpers import send_notification_to_admin, format_price, format_datetime
from config import settings

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False

    async def start_payment_checker(self) -> None:
        """
        –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        """
        self.is_running = True
        logger.info("–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω")

        while self.is_running:
            try:
                await self._check_pending_payments()
                await asyncio.sleep(settings.PAYMENT_CHECK_INTERVAL)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_payment_checker(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        self.is_running = False
        logger.info("–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _check_pending_payments(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
            pending_payments = await PaymentOperations.get_pending_payments()

            if pending_payments:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                text = f"""
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö</b>

–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π:

"""

                for payment in pending_payments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    method_text = "–°–ë–ü" if payment['method'] == 'sbp' else "–ö—Ä–∏–ø—Ç–∞"
                    user_name = payment.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')

                    text += f"""
üí≥ ‚Ññ{payment['payment_id']} - {format_price(payment['amount'])} ‚ÇΩ ({method_text})
üë§ {user_name} | {format_datetime(payment['created_at'])}
"""

                if len(pending_payments) > 5:
                    text += f"\n... –∏ –µ—â–µ {len(pending_payments) - 5} –ø–ª–∞—Ç–µ–∂–µ–π"

                text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."

                await send_notification_to_admin(self.bot, text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

    async def notify_payment_confirmed(self, payment_id: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        return await self.notify_payment_confirmed_with_post_creation(payment_id)

    async def notify_payment_confirmed_with_post_creation(self, payment_id: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment = await PaymentOperations.get_payment(payment_id)
            if not payment:
                logger.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserOperations.get_user(payment['user_id'])
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payment['user_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ –ø–æ —Å—É–º–º–µ
            post_type = 'regular'
            if payment['amount'] == settings.PINNED_POST_PRICE:
                post_type = 'pinned'
            elif payment['amount'] == settings.REGULAR_POST_PRICE:
                post_type = 'regular'

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            method_text = "–°–ë–ü" if payment['method'] == 'sbp' else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"
            post_type_name = "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π" if post_type == 'pinned' else "–û–±—ã—á–Ω—ã–π"

            text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>

–í–∞—à –ø–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} –Ω–∞ —Å—É–º–º—É {format_price(payment['amount'])} ‚ÇΩ ({method_text}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–¢–∏–ø –ø–æ—Å—Ç–∞: <b>{post_type_name}</b>

–¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞! üìù

üì∏ <b>–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç {settings.MIN_PHOTOS} –¥–æ {settings.MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Ñ–æ—Ç–æ:</b>
‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤  
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–∏–º–∏

<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞</b>
"""

            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
                    callback_data=f"continue_post:{payment_id}"
                )
            ]])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(
                chat_id=payment['user_id'],
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payment['user_id']} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return False

    async def notify_payment_rejected(self, payment_id: int, reason: str = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment = await PaymentOperations.get_payment(payment_id)
            if not payment:
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            method_text = "–°–ë–ü" if payment['method'] == 'sbp' else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"
            reason_text = f"\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}" if reason else ""

            text = f"""
‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} –Ω–∞ —Å—É–º–º—É {format_price(payment['amount'])} ‚ÇΩ ({method_text}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.{reason_text}

ü§ù <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b>
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: @balykoal

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start
"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(
                chat_id=payment['user_id'],
                text=text,
                parse_mode="HTML"
            )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payment['user_id']} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return False

    async def notify_post_published(self, user_id: int, post_id: int, message_id: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            post_id: ID –ø–æ—Å—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            text = f"""
üéâ <b>–í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>

‚úÖ –ü–æ—Å—Ç ‚Ññ{post_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ @richmondmarket

üîó <b>–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:</b>
https://t.me/rc_exchng/{message_id}

üìä <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –í–∞—à –ø–æ—Å—Ç —É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Ö–æ–¥—è—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!

–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏! üí∞
"""

            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode="HTML",
                disable_web_page_preview=True
            )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return False

    async def broadcast_message(self, message_text: str, user_ids: List[int] = None) -> Dict[str, int]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            user_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ None - –≤—Å–µ–º)

        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö
            if user_ids is None:
                all_users = await UserOperations.get_all_users()
                user_ids = [user['user_id'] for user in all_users]

            stats = {
                'total': len(user_ids),
                'sent': 0,
                'failed': 0,
                'blocked': 0
            }

            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            for user_id in user_ids:
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode="HTML"
                    )

                    stats['sent'] += 1

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    await asyncio.sleep(0.05)  # 50ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

                except Exception as e:
                    error_msg = str(e)

                    if "blocked by the user" in error_msg or "chat not found" in error_msg:
                        stats['blocked'] += 1
                        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    else:
                        stats['failed'] += 1
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            logger.info(
                f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}, –û—à–∏–±–æ–∫: {stats['failed']}, –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            report = f"""
üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {stats['total']}
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}
‚Ä¢ –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {stats['failed']}

‚úÖ <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {round(stats['sent'] / stats['total'] * 100, 1)}%
"""

            await send_notification_to_admin(self.bot, report)

            return stats

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return {'total': 0, 'sent': 0, 'failed': 0, 'blocked': 0}

    async def send_admin_notification(self, title: str, message: str, urgent: bool = False) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            urgent: –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            prefix = "üö®" if urgent else "üì¢"

            text = f"""
{prefix} <b>{title}</b>

{message}

<i>–í—Ä–µ–º—è: {format_datetime(None)}</i>
"""

            await self.bot.send_message(
                chat_id=settings.ADMIN_ID,
                text=text,
                parse_mode="HTML"
            )

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return False

    async def notify_admin_new_payment(self, payment_id: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            from utils.helpers import format_price, format_user_info
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment = await PaymentOperations.get_payment(payment_id)
            if not payment:
                return False

            user = await UserOperations.get_user(payment['user_id'])
            if not user:
                return False

            method_text = "üè¶ –°–ë–ü"
            user_info = format_user_info(user)

            text = f"""
    üí≥ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>

    –ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id}
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}
    –°—É–º–º–∞: {format_price(payment['amount'])} ‚ÇΩ
    –°–ø–æ—Å–æ–±: {method_text}
    """

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
                    callback_data=f"moderate_payment:{payment_id}"
                )]
            ])

            await self.bot.send_message(
                chat_id=settings.ADMIN_ID,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

            logger.info(f"–ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ {payment_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id}: {e}")
            return False

    async def notify_new_user(self, user_id: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        Args:
            user_id: ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            user = await UserOperations.get_user(user_id)
            if not user:
                return False

            from utils.helpers import format_user_info

            text = f"""
üëã <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>

–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: {format_user_info(user)}
–í—Ä–µ–º—è: {format_datetime(user.get('reg_date'))}

–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å!
"""

            return await self.send_admin_notification("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", text.strip())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            return False

    async def notify_system_error(self, error: Exception, context: str = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ

        Args:
            error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            context_text = f" –≤ {context}" if context else ""

            text = f"""
‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞{context_text}:

<code>{str(error)}</code>

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã!
"""

            return await self.send_admin_notification("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", text, urgent=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ: {e}")
            return False