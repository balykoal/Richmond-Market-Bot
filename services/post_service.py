"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
–ü—É–±–ª–∏–∫–∞—Ü–∏—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ
"""

import logging
from typing import Tuple, Optional
from aiogram import Bot

from database import PostOperations, UserOperations
from utils.helpers import MediaHelper, format_price
from config import settings, PostType, ItemCondition

logger = logging.getLogger(__name__)


class PostService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def publish_post(self, post_id: int) -> Tuple[bool, Optional[int]]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ

        Args:
            post_id: ID –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post = await PostOperations.get_post(post_id)
            if not post:
                logger.error(f"–ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False, None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserOperations.get_user(post['user_id'])
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {post['user_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False, None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = self._format_channel_post(post, user)

            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            media_group = MediaHelper.create_media_group(post['photos'])

            if not media_group:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                return False, None

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            media_group[0].caption = post_text
            media_group[0].parse_mode = "HTML"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –≤ –∫–∞–Ω–∞–ª
            messages = await self.bot.send_media_group(
                chat_id=settings.TARGET_CHANNEL,
                media=media_group
            )

            if not messages:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                return False, None

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            main_message_id = messages[0].message_id

            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø–æ—Å—Ç –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ç–∏–ø
            if post['post_type'] == PostType.PINNED:
                try:
                    await self.bot.pin_chat_message(
                        chat_id=settings.TARGET_CHANNEL,
                        message_id=main_message_id,
                        disable_notification=True
                    )
                    logger.info(f"–ü–æ—Å—Ç {post_id} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç {post_id}: {e}")

            logger.info(f"–ü–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (message_id: {main_message_id})")
            return True, main_message_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return False, None

    def _format_channel_post(self, post: dict, user: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞

        Args:
            post: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        condition_emoji = "‚ú®" if post['condition'] == ItemCondition.NEW else "üîÑ"
        condition_text = "–ù–æ–≤–æ–µ" if post['condition'] == ItemCondition.NEW else "–ë/—É"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
        type_emoji = "üìå" if post['post_type'] == PostType.PINNED else "üìù"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        price_text = format_price(post['price'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ —Å—Å—ã–ª–∫–æ–π
        contact_info = self._format_contact_with_link(post['contact_info'])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ—Å—Ç–∞
        article_code = self._generate_article_code(post['post_id'])

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        text = f"""{type_emoji} <b>{post['title']}</b>

    {condition_emoji} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {condition_text}
    üí∞ <b>–¶–µ–Ω–∞:</b> {price_text} ‚ÇΩ

    üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
    {post['description']}

    üìû <b>–°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º:</b>
    {contact_info}

    <b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>
    üè∑ –ê—Ä—Ç–∏–∫—É–ª: {article_code} | @richmondmarket"""

        return text.strip()

    @staticmethod
    def _generate_article_code(post_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ—Å—Ç–∞

        Args:
            post_id: ID –ø–æ—Å—Ç–∞

        Returns:
            –ê—Ä—Ç–∏–∫—É–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ RM-XXX
        """
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ RM-001, RM-002, etc.
        return f"RM-{post_id:03d}"

    @staticmethod
    def _format_contact_with_link(contact_info: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ–∑–¥–∞–≤–∞—è —Å—Å—ã–ª–∫–∏ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ

        Args:
            contact_info: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
        """
        import re

        # –ò—â–µ–º username Telegram (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
        username_pattern = r'@(\w+)'
        usernames = re.findall(username_pattern, contact_info)

        formatted_contact = contact_info

        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ username –Ω–∞ —Å—Å—ã–ª–∫–∏
        for username in usernames:
            old_text = f"@{username}"
            new_text = f'<a href="https://t.me/{username}">@{username}</a>'
            formatted_contact = formatted_contact.replace(old_text, new_text)

        # –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –¥–µ–ª–∞–µ–º –∏—Ö –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
        phone_pattern = r'(\+?\d[\d\s\-\(\)]{8,})'
        phones = re.findall(phone_pattern, contact_info)

        for phone in phones:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∫–æ–±–∫–∏ –¥–ª—è —Å—Å—ã–ª–∫–∏
            clean_phone = re.sub(r'[\s\-()]', '', phone)
            if clean_phone.startswith('+') or len(clean_phone) >= 10:
                phone_link = f'<a href="tel:{clean_phone}">{phone}</a>'
                formatted_contact = formatted_contact.replace(phone, phone_link, 1)

        return formatted_contact

    @staticmethod
    async def get_post_statistics(post_id: int) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞

        Args:
            post_id: ID –ø–æ—Å—Ç–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            post = await PostOperations.get_post(post_id)
            if not post:
                return {}

            stats = {
                'post_id': post_id,
                'status': post['status'],
                'created_at': post['created_at'],
                'published_at': post.get('published_at'),
                'message_id': post.get('message_id'),
                'is_pinned': post['post_type'] == PostType.PINNED,
                'views': 0,  # TODO: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ Bot API
                'reactions': 0  # TODO: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
            }

            return stats

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return {}

    async def delete_post(self, post_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞

        Args:
            post_id: ID –ø–æ—Å—Ç–∞

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            post = await PostOperations.get_post(post_id)
            if not post or not post.get('message_id'):
                logger.warning(f"–ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                return False

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            try:
                await self.bot.delete_message(
                    chat_id=settings.TARGET_CHANNEL,
                    message_id=post['message_id']
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {post['message_id']}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞

            logger.info(f"–ü–æ—Å—Ç {post_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return False

    async def unpin_post(self, post_id: int) -> bool:
        """
        –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ

        Args:
            post_id: ID –ø–æ—Å—Ç–∞

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            post = await PostOperations.get_post(post_id)
            if not post or not post.get('message_id'):
                return False

            await self.bot.unpin_chat_message(
                chat_id=settings.TARGET_CHANNEL,
                message_id=post['message_id']
            )

            logger.info(f"–ü–æ—Å—Ç {post_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–µ–ø–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return False

    @staticmethod
    async def edit_post(post_id: int, updates) -> bool:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ

        Args:
            post_id: ID –ø–æ—Å—Ç–∞
            **updates: –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            # –°–ª–æ–∂–Ω–æ—Å—Ç—å: Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
            # –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
            # 1. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            # 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

            logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ {post_id} (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return False

    @staticmethod
    def _validate_post_data(post: dict) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

        Args:
            post: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞

        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        """
        required_fields = ['title', 'description', 'price', 'contact_info', 'photos']

        for field in required_fields:
            if not post.get(field):
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if len(post['photos']) < settings.MIN_PHOTOS:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(post['photos'])} < {settings.MIN_PHOTOS}")
            return False

        if len(post['photos']) > settings.MAX_PHOTOS:
            logger.error(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(post['photos'])} > {settings.MAX_PHOTOS}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        if post['price'] <= 0:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: {post['price']}")
            return False

        return True