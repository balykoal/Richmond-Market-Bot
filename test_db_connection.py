# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ Python —Å–∫—Ä–∏–ø—Ç
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_db_connection.py:

import asyncio
import asyncpg
import logging
from config import settings


async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(
            host=settings.DB_HOST,
            port=settings.DB_PORT,
            user=settings.DB_USER,
            password=settings.DB_PASSWORD,
            database=settings.DB_NAME
        )

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  - {table['table_name']}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {users_count}")
        except:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        try:
            posts_count = await conn.fetchval("SELECT COUNT(*) FROM posts")
            print(f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {posts_count}")
        except:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ posts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
        try:
            payments_count = await conn.fetchval("SELECT COUNT(*) FROM payments")
            print(f"üí≥ –ü–ª–∞—Ç–µ–∂–µ–π –≤ –±–∞–∑–µ: {payments_count}")
        except:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ payments –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        await conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL:")
        print("   - Windows: –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á -> –°–ª—É–∂–±—ã -> postgresql")
        print("   - Linux: sudo systemctl status postgresql")
        print("   - macOS: brew services list | grep postgresql")
        print("\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ:")
        print(f"   DB_HOST={settings.DB_HOST}")
        print(f"   DB_PORT={settings.DB_PORT}")
        print(f"   DB_USER={settings.DB_USER}")
        print(f"   DB_NAME={settings.DB_NAME}")
        print("\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ psql:")
        print(f"   psql -h {settings.DB_HOST} -p {settings.DB_PORT} -U {settings.DB_USER} -d {settings.DB_NAME}")


if __name__ == "__main__":
    asyncio.run(test_connection())