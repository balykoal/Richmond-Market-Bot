"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
–£—Ç–∏–ª–∏—Ç—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
"""

import logging
from datetime import datetime
from typing import List, Dict
from aiogram.types import PhotoSize, InputMediaPhoto, User

from config import settings, PostType, PaymentMethod, ItemCondition

logger = logging.getLogger(__name__)


class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""

    @staticmethod
    def format_post_info(post_data: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            post_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        condition_text = "‚ú® –ù–æ–≤–æ–µ" if post_data['condition'] == ItemCondition.NEW else "üîÑ –ë/—É"
        post_type_text = "üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π" if post_data['post_type'] == PostType.PINNED else "üìù –û–±—ã—á–Ω—ã–π"

        text = f"""
üì¶ <b>{post_data['title']}</b>

{condition_text}
{post_type_text}

üí∞ <b>–¶–µ–Ω–∞:</b> {PriceHelper.format_price(post_data['price'])} ‚ÇΩ

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{post_data['description']}

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {post_data['contact_info']}

üïí <i>–°–æ–∑–¥–∞–Ω:</i> {TimeHelper.format_datetime(post_data['created_at'])}
        """

        return text.strip()

    @staticmethod
    def format_payment_info(payment_data: Dict, user_data: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ

        Args:
            payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        method_text = "üè¶ –°–ë–ü" if payment_data['method'] == PaymentMethod.SBP else "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"

        text = f"""
üí≥ <b>–ü–ª–∞—Ç–µ–∂ #{payment_data['payment_id']}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {UserHelper.format_user_info(user_data)}
üí∞ <b>–°—É–º–º–∞:</b> {PriceHelper.format_price(payment_data['amount'])} {payment_data['currency']}
üîÑ <b>–°–ø–æ—Å–æ–±:</b> {method_text}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {TimeHelper.format_datetime(payment_data['created_at'])}
        """

        return text.strip()

    @staticmethod
    def format_admin_stats(stats: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞

        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚îú –í—Å–µ–≥–æ: {stats['users']['total']}
‚îî –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['users']['new_today']}

üìù <b>–ü–æ—Å—Ç—ã:</b>
‚îú –í—Å–µ–≥–æ: {stats['posts']['total']}
‚îú –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {stats['posts']['published']}
‚îî –°–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–æ: {stats['posts']['today']}

üí∞ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>
‚îú –í—Å–µ–≥–æ: {stats['payments']['total']}
‚îú –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {stats['payments']['confirmed']}
‚îú –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {stats['payments']['pending']}
‚îî –û–±—â–∏–π –¥–æ—Ö–æ–¥: {PriceHelper.format_price(stats['payments']['revenue'])} ‚ÇΩ
        """

        return text.strip()


class TimeHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"""

    @staticmethod
    def format_datetime(dt: datetime) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏

        Args:
            dt: –û–±—ä–µ–∫—Ç datetime

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if not dt:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        return dt.strftime("%d.%m.%Y %H:%M")

    @staticmethod
    def get_time_ago(dt: datetime) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ "–≤—Ä–µ–º—è –Ω–∞–∑–∞–¥"

        Args:
            dt: –û–±—ä–µ–∫—Ç datetime

        Returns:
            –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        """
        if not dt:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        now = datetime.now()
        diff = now - dt

        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "–¢–æ–ª—å–∫–æ —á—Ç–æ"


class MediaHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞"""

    @staticmethod
    def get_largest_photo(photos: List[PhotoSize]) -> PhotoSize:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

        Args:
            photos: –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

        Returns:
            –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        """
        if not photos:
            return None

        return max(photos, key=lambda p: p.file_size or 0)

    @staticmethod
    def create_media_group(photo_ids: List[str]) -> List[InputMediaPhoto]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        Args:
            photo_ids: –°–ø–∏—Å–æ–∫ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

        Returns:
            –°–ø–∏—Å–æ–∫ InputMediaPhoto
        """
        if not photo_ids:
            return []

        media_group = []
        for photo_id in photo_ids:
            media_group.append(InputMediaPhoto(media=photo_id))

        return media_group


class UserHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    @staticmethod
    def format_user_info(user_data: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        parts = []

        if user_data.get('first_name'):
            parts.append(user_data['first_name'])

        if user_data.get('last_name'):
            parts.append(user_data['last_name'])

        name = " ".join(parts) if parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"

        if user_data.get('username'):
            return f"{name} (@{user_data['username']})"
        else:
            return f"{name} (ID: {user_data['user_id']})"

    @staticmethod
    def extract_user_data(user: User) -> Dict:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ User

        Args:
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        return {
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'is_bot': user.is_bot,
            'language_code': user.language_code
        }


class PriceHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏"""

    @staticmethod
    def format_price(price: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã

        Args:
            price: –¶–µ–Ω–∞

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if price == int(price):
            return f"{int(price):,}".replace(',', ' ')
        else:
            return f"{price:,.2f}".replace(',', ' ')

    @staticmethod
    def get_post_price(post_type: str) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å—Ç

        Args:
            post_type: –¢–∏–ø –ø–æ—Å—Ç–∞

        Returns:
            –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        """
        if post_type == PostType.PINNED:
            return settings.PINNED_POST_PRICE
        else:
            return settings.REGULAR_POST_PRICE


class TextHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º"""

    @staticmethod
    def truncate_text(text: str, max_length: int = 50) -> str:
        """
        –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã

        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

        Returns:
            –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""

        if len(text) <= max_length:
            return text

        return text[:max_length-3] + "..."

    @staticmethod
    def escape_html(text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤

        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""

        return (text
                .replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace('"', "&quot;")
                .replace("'", "&#x27;"))


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return PriceHelper.format_price(price)


def format_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    return TimeHelper.format_datetime(dt)


def format_user_info(user_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return UserHelper.format_user_info(user_data)


async def send_notification_to_admin(bot, message: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        await bot.send_message(
            chat_id=settings.ADMIN_ID,
            text=f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n{message}",
            parse_mode="HTML"
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        return False


async def log_error(error: Exception, context: str = None) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏

    Args:
        error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    """
    error_msg = f"–û—à–∏–±–∫–∞"
    if context:
        error_msg += f" –≤ {context}"
    error_msg += f": {str(error)}"

    logger.error(error_msg, exc_info=True)