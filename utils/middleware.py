"""
Middleware –¥–ª—è –±–æ—Ç–∞
–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
from typing import Callable, Dict, Any, Awaitable, Union
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject

from database import UserOperations
from utils.helpers import UserHelper, send_notification_to_admin
from config import settings

logger = logging.getLogger(__name__)


class DatabaseMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any],
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            event: –°–æ–±—ã—Ç–∏–µ (Message –∏–ª–∏ CallbackQuery)
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            user = event.from_user

            if user and not user.is_bot:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = UserHelper.extract_user_data(user)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = await UserOperations.get_user(user.id)
                if not existing_user:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    success = await UserOperations.create_user(
                        user_id=user_data['user_id'],
                        username=user_data['username'],
                        first_name=user_data['first_name'],
                        last_name=user_data['last_name']
                    )

                    if success:
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        from utils.helpers import format_user_info
                        await send_notification_to_admin(
                            data.get('bot'),  # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                            f"üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {format_user_info(user_data)}"
                        )
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                    if (existing_user.get('username') != user.username or
                        existing_user.get('first_name') != user.first_name or
                        existing_user.get('last_name') != user.last_name):

                        await UserOperations.create_user(
                            user_id=user_data['user_id'],
                            username=user_data['username'],
                            first_name=user_data['first_name'],
                            last_name=user_data['last_name']
                        )

                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                data['user_data'] = user_data
                data['db_user'] = existing_user or user_data

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            return await handler(event, data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ DatabaseMiddleware: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return await handler(event, data)


class AdminMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any],
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            event: –°–æ–±—ã—Ç–∏–µ
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            user = event.from_user

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            data['is_admin'] = user and user.id == settings.ADMIN_ID

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞
            if data['is_admin']:
                action_text = None

                if isinstance(event, Message):
                    if event.text and event.text.startswith('/'):
                        action_text = f"–ö–æ–º–∞–Ω–¥–∞: {event.text}"
                    elif event.text:
                        action_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ: {event.text[:50]}..."
                    elif event.photo:
                        action_text = "–§–æ—Ç–æ"
                    elif event.document:
                        action_text = "–î–æ–∫—É–º–µ–Ω—Ç"
                elif isinstance(event, CallbackQuery):
                    action_text = f"Callback: {event.data}"

                if action_text:
                    logger.info(f"–ê–¥–º–∏–Ω {user.id}: {action_text}")

            return await handler(event, data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ AdminMiddleware: {e}")
            return await handler(event, data)


class ThrottlingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
    """

    def __init__(self, limit: float = 1.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware

        Args:
            limit: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.limit = limit
        self.user_timings: Dict[int, float] = {}
        self.media_groups: Dict[str, float] = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: Union[Message, CallbackQuery],
            data: Dict[str, Any],
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            event: –°–æ–±—ã—Ç–∏–µ
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        """
        try:
            import time

            user = event.from_user
            if not user:
                return await handler(event, data)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
            if user.id == settings.ADMIN_ID:
                return await handler(event, data)

            current_time = time.time()
            user_id = user.id

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
            if isinstance(event, Message) and event.media_group_id:
                media_group_id = event.media_group_id

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –Ω–µ–¥–∞–≤–Ω–æ
                if media_group_id in self.media_groups:
                    last_time = self.media_groups[media_group_id]
                    if current_time - last_time < 2.0:  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥
                        self.media_groups[media_group_id] = current_time
                        return await handler(event, data)

                # –ù–æ–≤–∞—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
                self.media_groups[media_group_id] = current_time
                self.user_timings[user_id] = current_time

                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                cutoff_time = current_time - 60
                self.media_groups = {
                    mid: timestamp
                    for mid, timestamp in self.media_groups.items()
                    if timestamp > cutoff_time
                }

                return await handler(event, data)

            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–µ-–º–µ–¥–∏–∞–≥—Ä—É–ø–ø
            if user_id in self.user_timings:
                if current_time - self.user_timings[user_id] < self.limit:
                    # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤")

                    # –î–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
                    if isinstance(event, CallbackQuery):
                        try:
                            await event.answer("‚è± –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
                        except:
                            pass

                    return None

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            self.user_timings[user_id] = current_time

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
            cutoff_time = current_time - 60
            self.user_timings = {
                uid: timestamp
                for uid, timestamp in self.user_timings.items()
                if timestamp > cutoff_time
            }

            return await handler(event, data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ThrottlingMiddleware: {e}")
            return await handler(event, data)

class ErrorHandlingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    """

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any],
    ) -> Any:
        """
        –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            event: –°–æ–±—ã—Ç–∏–µ
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            return await handler(event, data)

        except Exception as e:
            logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", exc_info=True)

            user = event.from_user
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            try:
                if isinstance(event, Message):
                    await event.answer(error_text)
                elif isinstance(event, CallbackQuery):
                    await event.answer(error_text, show_alert=True)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                if user and user.id != settings.ADMIN_ID:
                    error_details = f"""
üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username or '–Ω–µ—Ç username'})
–û—à–∏–±–∫–∞: <code>{str(e)[:200]}</code>

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã!
                    """

                    await send_notification_to_admin(data.get('bot'), error_details)

            except Exception as notification_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {notification_error}")

            return None


class LoggingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
    """

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any],
    ) -> Any:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            event: –°–æ–±—ã—Ç–∏–µ
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            user = event.from_user

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            if isinstance(event, Message):
                log_msg = f"Message from {user.id}"
                if event.text:
                    log_msg += f": {event.text[:100]}"
                elif event.photo:
                    log_msg += ": [Photo]"
                elif event.document:
                    log_msg += ": [Document]"
            elif isinstance(event, CallbackQuery):
                log_msg = f"Callback from {user.id}: {event.data}"
            else:
                log_msg = f"Unknown event from {user.id}"

            logger.debug(log_msg)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            result = await handler(event, data)

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ LoggingMiddleware: {e}")
            return await handler(event, data)